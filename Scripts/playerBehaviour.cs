using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;
using UnityEngine.SceneManagement;


public class playerBehaviour : MonoBehaviour
{   
    public static playerBehaviour instance;
    //Background color
    //0,232,204,255
    //Plane
    //0,81,118,255

    //option 1 cores
    //main camera 61,0,67,255
    //plane 91,0,77,255
    //INFECTION COLOR: 0,255,31,0
    

    //Space between the objects
    float depthEsp = 1.7f;
    float lateralEsp = 1.04f;
    
    //FASE - DIMENSIONS
    //int row = 50;
    int row = 90;
    int column = 16;

    //Vector responsible for storing the scenario information
    //to show [SerializeField]
    //private int[] loadingArray = new int[] {102,0,0,0,0,101,101,101,101,101,101,0,0,0,0,102,102,0,0,0,0,101,101,101,101,101,101,0,0,0,0,102,102,0,0,0,0,101,101,101,101,101,101,0,0,0,0,102,102,0,121,121,0,101,101,101,101,101,101,0,121,121,0,102,102,0,0,0,0,121,101,101,101,101,121,0,0,0,0,102,102,0,0,0,0,101,101,101,101,101,101,0,0,0,0,102,102,0,122,122,121,102,102,107,107,102,102,121,122,122,0,102,102,0,0,0,121,102,102,107,107,102,102,121,0,0,0,102,0,0,0,0,121,101,101,0,0,101,101,121,0,0,0,0,122,0,0,0,0,101,101,0,0,101,101,0,0,0,0,122,122,0,0,0,0,101,101,0,0,101,101,0,0,0,0,122,0,0,0,0,0,101,101,0,0,101,101,0,0,0,0,0,0,0,0,0,0,101,101,121,121,101,101,0,0,0,0,0,122,0,107,107,0,101,101,101,101,101,101,0,107,107,0,122,102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,102,0,0,0,0,101,101,101,101,101,101,0,0,0,0,102,102,0,122,122,0,101,101,101,101,101,101,0,122,122,0,102,102,0,0,0,0,102,101,101,101,101,102,0,0,0,0,102,102,0,0,0,0,101,101,101,101,101,101,0,0,0,0,102,102,0,0,0,121,102,102,101,101,102,102,121,0,0,0,102,102,0,0,0,121,102,102,107,107,102,102,121,0,0,0,102,0,0,0,0,121,101,101,101,101,101,101,121,0,0,0,0,122,0,121,121,0,101,101,101,101,101,101,0,121,121,0,122,102,0,0,0,0,101,101,101,101,101,101,0,0,0,0,102,102,0,0,0,0,101,101,101,101,101,101,0,0,0,0,102,102,0,0,0,0,101,101,0,0,101,101,0,0,0,0,102,102,0,0,0,0,101,101,121,121,101,101,0,0,0,0,102,102,0,0,0,0,101,101,101,101,101,101,0,0,0,0,102,102,0,107,107,0,101,101,101,101,101,101,0,107,107,0,102,102,0,0,0,102,101,101,101,101,101,101,102,0,0,0,102,102,0,0,0,102,102,102,0,0,102,102,102,0,0,0,102,0,0,0,0,102,101,101,101,101,101,101,102,0,0,0,0,122,121,121,121,0,101,101,101,101,101,101,0,121,121,121,122,122,0,0,0,0,101,101,101,101,101,101,0,0,0,0,122,0,0,0,0,0,101,101,101,101,101,101,0,0,0,0,0,0,0,0,0,0,101,101,101,101,101,101,0,0,0,0,0,0,107,107,0,121,121,101,102,102,101,121,121,0,107,107,0,0,107,107,0,0,101,101,0,0,101,101,0,0,107,107,0,0,0,102,102,102,101,101,0,0,101,101,102,102,102,0,0,0,0,102,102,102,101,101,0,0,101,101,102,102,102,0,0,122,122,102,102,102,101,101,0,0,101,101,102,102,102,122,122,122,122,102,102,102,101,101,0,0,101,101,102,102,102,122,122,0,0,0,0,0,0,0,107,107,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,301,0,0,0,0,0,308,0,0,0,0,0,301,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,326,0,0,0,0,0,326,0,0,0,0,0,326,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};

    //TO ADD A NEW LOADING ARRAY - CHANGE 35,36,115 

    //private int[] loadingArrayTeste = new int [] {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,122,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,122,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,122,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,122,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,122,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,122,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,122,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,122,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102};
    //Rectangles with different colors
    //private int[] loadingArray0 = new int [] {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,122,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,122,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,122,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,122,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,122,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,122,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,122,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,122,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102};
    private int[] loadingArray0 = new int [] {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,102,102,102,122,122,122,122,122,122,122,122,102,102,102,102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,122,122,122,122,122,102,102,102,102,102,102,122,122,122,122,122,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,102,102,102,122,122,122,122,122,122,122,122,102,102,102,102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,122,122,122,122,122,102,102,102,102,102,102,122,122,122,122,122,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,122,0,0,0,122,122,122,122,122,122,122,122,122,122,122,122,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,308,0,0,0,0,0,0,0,0,0,0,0,0,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    //Maze of cubes
    //testeprivate int[] loadingArray1 = new int [] {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,122,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,122,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,122,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,122,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,122,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,122,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,122,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,122,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102};
    private int[] loadingArray1 = new int[] {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,308,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,122,0,122,0,122,0,122,0,122,0,122,0,122,0,122,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,122,0,122,0,122,0,122,0,122,0,122,0,122,0,122,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,122,122,122,122,122,0,0,0,0,0,0,122,122,122,122,122,122,122,122,122,122,122,0,0,0,0,122,122,122,122,122,122,122,122,122,122,122,122,122,0,0,122,122,122,122,122,122,122,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,308,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,122,0,122,0,122,0,122,0,122,0,122,0,122,0,122,122,0,122,0,122,0,122,0,122,0,122,0,122,0,122,0,0,122,0,122,0,122,0,122,0,122,0,122,0,122,0,122,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    
    //private int[] loadingArray1 = new int[] {};  
    //the real array - private int[] loadingArray1 = new int [] {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,221,0,221,0,0,0,0,0,221,0,221,0,221,0,221,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,221,0,221,0,0,0,0,0,221,0,221,0,221,0,221,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,221,0,221,0,0,0,0,0,221,0,221,0,221,0,221,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,221,0,221,0,221,0,0,0,221,0,221,0,221,0,221,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,221,0,221,0,221,0,0,0,221,0,221,0,221,0,221,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,221,0,221,0,221,0,0,0,221,0,221,0,221,0,221,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,221,0,221,0,221,0,0,0,0,0,221,0,221,0,221,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,221,0,0,0,0,0,0,0,0,0,221,0,221,0,221,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,221,0,0,0,0,0,0,0,0,0,221,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,221,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,221,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,221,0,221,0,0,0,221,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,221,0,221,0,0,0,221,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,221,0,221,0,0,0,221,0,221,0,221,107,107,107,107,0,0,0,0,0,0,0,0,0,0,0,0,107,107,107,107};
    //Rectangles with spheres inside
    //private int[] loadingArray2 = new int [] {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,122,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,122,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,122,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,122,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,122,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,122,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,122,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,122,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102};
    //private int[] loadingArray2 = new int[] {};
    private int[] loadingArray2 = new int[] {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,308,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,122,0,122,0,122,0,122,0,122,0,122,0,122,0,122,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,122,0,122,0,122,0,122,0,122,0,122,0,122,0,122,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,122,122,122,122,122,0,0,0,0,0,0,122,122,122,122,122,122,122,122,122,122,122,0,0,0,0,122,122,122,122,122,122,122,122,122,122,122,122,122,0,0,122,122,122,122,122,122,122,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,308,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,122,0,122,0,122,0,122,0,122,0,122,0,122,0,122,122,0,122,0,122,0,122,0,122,0,122,0,122,0,122,0,0,122,0,122,0,122,0,122,0,122,0,122,0,122,0,122,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};

    //Cubes and rectangles mixed
    //private int[] loadingArray3 = new int [] {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,122,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,122,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,122,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,122,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,122,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,122,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,122,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,122,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102};
    private int[] loadingArray3 = new int[] {102,0,0,0,0,101,101,101,101,101,101,0,0,0,0,102,102,0,0,0,0,101,101,101,101,101,101,0,0,0,0,102,102,0,0,0,0,101,101,101,101,101,101,0,0,0,0,102,102,0,121,121,0,101,101,101,101,101,101,0,121,121,0,102,102,0,0,0,0,121,101,101,101,101,121,0,0,0,0,102,102,0,0,0,0,101,101,101,101,101,101,0,0,0,0,102,102,0,122,122,122,102,102,0,0,102,102,122,122,122,0,102,102,0,0,0,122,102,102,0,0,102,102,122,0,0,0,102,122,0,0,0,122,101,101,0,0,101,101,122,0,0,0,122,122,0,0,0,0,101,101,0,0,101,101,0,0,0,0,122,122,0,0,0,0,101,101,0,0,101,101,0,0,0,0,122,122,0,0,0,0,101,101,0,0,101,101,0,0,0,0,122,122,0,0,0,0,101,101,121,121,101,101,0,0,0,0,122,122,0,0,0,0,101,101,101,101,101,101,0,0,0,0,122,102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,102,0,0,0,0,101,101,101,101,101,101,0,0,0,0,102,102,0,122,122,0,101,101,101,101,101,101,0,122,122,0,102,102,0,0,0,0,102,101,101,101,101,102,0,0,0,0,102,102,0,0,0,0,101,101,101,101,101,101,0,0,0,0,102,102,0,0,0,121,102,102,101,101,102,102,121,0,0,0,102,102,0,0,0,121,102,102,0,0,102,102,121,0,0,0,102,122,0,0,0,121,101,101,101,101,101,101,121,0,0,0,122,122,0,121,121,0,101,101,101,101,101,101,0,121,121,0,122,102,0,0,0,0,101,101,101,101,101,101,0,0,0,0,102,102,0,0,0,0,101,101,101,101,101,101,0,0,0,0,102,102,0,0,0,0,101,101,0,0,101,101,0,0,0,0,102,102,0,0,0,0,101,101,122,122,101,101,0,0,0,0,102,102,0,0,0,0,101,101,101,101,101,101,0,0,0,0,102,102,0,0,0,0,101,101,101,101,101,101,0,0,0,0,102};
    
    //THE NUMBER OF LOADING ARRAYS
    private int[][] levelCreator = new int[4][];
    private int[] aleatoryIntArray = new int[4];
    

    /*MANUAL OF THE SCENARIO CODIFICATION
    BASE 20, REST OF DIVISION IS USED

    Number DCBA - A-identification, B-color, C-scale, D-number of elements per cell;  

    0- for NOTHING
    1- CUBES - Y-AXIS: 0,5;
    2- RECTANGLES - Y-AXIS: 1,5;
    3- SPHERES - Y-AXIS: 0,5;
    4- ICOSPHERE - Y-AXIS: 0,5;
    5- CONE - Y-AXIS: 1,14;
    6- PENTAGON(OPEN) - Y-AXIS: 0.427;
    7- GOLDEN COLLECT - Y-AXIS: 0,312;
    8- RECTANGLE-HORIZONTAL - Y-AXIS: 0,5;
    9- CILINDER - Y-AXIS: 0,5;
    *****************************/
    //Free space - space between the objects of the game
    int freeSpace = 0;
    //SCENARIO MATRICE
    public int[,] scenario = new int[90,16];
    
    //BASE - Inform the maximum of solids we can store
    public int baseLimit = 20;

    /***********NEW SOLID**********/
    //Array of type of solid - type Object specific of Unity
    public Transform[] typeOfSolid = new Transform[7];
    //Array of Y-AXIS of the solids
    public float[] yAxis = new float[] {0.5f, 1.5f, 0.5f, 0.5f, 1.14f, 0.417f, 0.5f};
    /*****************************/

    //PLAYER
    public GameObject player;
    Rigidbody rb;
    private bool death = false;
    bool alreadyInfected = false;
    bool gameHasStarted = false;

    //PLAYER CONTROLERS
    private Vector2 lastMousePos;
    //Intensity of the speed
    public int thrust = 7;

    //CAMERA 
    public float minCameraDistance = 1.2f;
    public float posCameraInit;

    //COLORS OF THE GAME//
    public Color friendlyColor = new Color(0.0f, 0.0f, 0.0f, 0.0f);//BLACK
    public Color infectionColor = new Color(73/255, 255/255, 0/255, 0.0f);//GREEN

    //To save the instantiate of the obstacle
    private Transform obstacle;
    //Get the render of the obstacle to change its color
    Renderer rend;

    //Super power
    bool super = false;

    

    void generateAleatoryNumbers(float min, float max, int quantity){
        for(int i=0; i < quantity; i++){
            aleatoryIntArray[i] = Mathf.RoundToInt(Random.Range(min, max));
        }
        Debug.Log("The configuration is:");
        for(int i=0; i < quantity; i++){
            Debug.Log(aleatoryIntArray[i]);
        }
        Debug.Log("the size is"+levelCreator.Length);
    }

    void loadLevelCreator(){
        levelCreator[0] = loadingArray0;
        levelCreator[1] = loadingArray1;
        levelCreator[2] = loadingArray2;
        levelCreator[3] = loadingArray3;
    }
    void Awake(){
        if(instance == null){
            instance = this;
        }
        else{
            Destroy(gameObject);
        }
    }
    //The function below build part of the scenario, between row iStart and iFinal(not including this)
    void createTheScenario(int iStart, int iFinal){
        //ID of the object
        int id;
        for(int i=iStart; i < iFinal; i++){
            //In the beginning of new challenges its given a distance
            if(i == 0)
                freeSpace = 8;
            else if(i%30 == 0)
                freeSpace += 8;

            for(int j = 0; j< column; j++){
                //Id receives the number of the SCENARIO matrice, to avoid overwriting
                id = scenario[i,j];
                //PENTAGON - The rotation of pentagon is different
                if(id%baseLimit == 6){
                    obstacle = Instantiate(typeOfSolid[(id%baseLimit)-1], new Vector3(-8.0f+j*lateralEsp, yAxis[(id%baseLimit)-1]*(id/100), freeSpace+i*depthEsp), Quaternion.identity);
                    Vector3 newScale = obstacle.transform.localScale;
                    newScale *= id/100;
                    obstacle.transform.localScale  = newScale;
                    obstacle.transform.Rotate(new Vector3(0,0,53.96f), Space.Self);
                    if((id/10)%10 == 2)
                        obstacle.GetComponent<Renderer>().material.color = infectionColor;
                    else
                        obstacle.GetComponent<Renderer>().material.color = friendlyColor;
                }
                //RECTANGLE HORIZONTAL
                else if(id%baseLimit == 8){
                    obstacle = Instantiate(typeOfSolid[6], new Vector3(-8.0f+j*lateralEsp, 0.5f*2, freeSpace+i*depthEsp), Quaternion.identity);
                    obstacle.transform.Rotate(new Vector3(0,0,90), Space.Self);
                    obstacle.transform.localScale  = new Vector3(obstacle.transform.localScale.x*2, obstacle.transform.localScale.y * id/100, obstacle.transform.localScale.z*2);
                    obstacle.GetComponent<Renderer>().material.color = friendlyColor;    
                }
                else if(id%baseLimit != 0){
                    //[id - 1], because the array is not counting the nothing(0)
                    //lateralEsp = 1;
                    //depthEsp = 1;
                    obstacle = Instantiate(typeOfSolid[(id%baseLimit)-1], new Vector3(-8.0f+j*lateralEsp, yAxis[(id%baseLimit)-1]*id/100, freeSpace+i*depthEsp), Quaternion.identity);
                    Vector3 newScale = obstacle.transform.localScale;
                    newScale *= id/100;
                    obstacle.transform.localScale  = newScale;
                    if((id/10)%10 == 0)
                        obstacle.GetComponent<Renderer>().material.color = friendlyColor;
                    else
                        obstacle.GetComponent<Renderer>().material.color = infectionColor;
                }
            }
        }
    }
    // Start is called before the first frame update
    void Start(){
        //Get the first position of the camera
        posCameraInit = Camera.main.transform.position.z;
        //Load the level creator with all the loading arrays
        loadLevelCreator();
        //Fill an array with aleatory numbers
        generateAleatoryNumbers(0f,levelCreator.Length - 1,levelCreator.Length);
        //Player RigidBody
        rb = GetComponent<Rigidbody>();
        /*Loads the scenario with the loading array that own the codification
        of the scenario*/
        for(int i=0; i < row; i++){
            for(int j = 0; j < column; j++){
                //Each array of loading has length of 30 rows * 16 colums
                if((i*column + j) < 30*16){
                    scenario[i,j] = levelCreator[aleatoryIntArray[0]][(i*column + j)];
                }
                else if((i*column + j) < 30*16*2){
                    //The second array will start at 0 but the index will be 30
                    scenario[i,j] = levelCreator[aleatoryIntArray[1]][(i*column + j) % 480];
                }
                else{
                    scenario[i,j] = levelCreator[aleatoryIntArray[2]][(i*column + j) % 480];
                }
            }
        }
        //Create the initial part of the scenario
        createTheScenario(0,20);
    }
   
    
    //int index=1;
    // Update is called once per frame  
    void Update(){
        

        if(death == false){
            //Super power - become bigger
            if(Input.GetKeyDown(KeyCode.F)){
                super = true;
                //player.transform.localScale = new Vector3(1,1,1) *5;
            }
            Vector2 deltaPos = Vector2.zero;
            if(Input.GetMouseButton(0)){
                Vector2 currentMousePos = Input.mousePosition;
                if(lastMousePos == Vector2.zero){
                    lastMousePos = currentMousePos;
                }
                deltaPos = currentMousePos - lastMousePos; 
                lastMousePos = currentMousePos;
                //Variation in x axis
                Vector3 force = new Vector3(deltaPos.x, 0, deltaPos.y) * thrust;
                //transform.Translate(force/4 *Time.deltaTime, Space.World);
                rb.AddForce(force);
            }
            else{
                lastMousePos = Vector2.zero;
            }
            //Displacement in z axis
            if(transform.position.z != -4 && !gameHasStarted){
                //transform.Translate(new Vector3(0,0,5f) * Time.deltaTime, Space.World);
                //rb.AddForce(new Vector3(0,0,8));
                UIManager.instance.StartGameUI();
                gameHasStarted=true;
            }
        }
    }

    int index = 1;
    //Execute after Update has finished
    private void LateUpdate(){
        //Every time camera walks 8 units, new 5 rows of the scenario is loaded
        if((Camera.main.transform.position.z - posCameraInit) > 8 && (20+5*index)<= row ){
            posCameraInit = Camera.main.transform.position.z;
            createTheScenario(15+5*index,20+5*index);
            index++;
        }
        Vector3 pos = transform.position;
        //Avoid the ball from failling laterally
        //Left
        if(transform.position.x < -7.81f){
            pos.x = -7.81f;
            transform.position = pos;
        }
        //Right
        if(transform.position.x > 7.9f){
            pos.x = 7.9f;
            transform.position = pos;
        }
        //The camera press the player
        if(transform.position.z < Camera.main.transform.position.z + minCameraDistance){
            pos.z = Camera.main.transform.position.z + minCameraDistance;
            //Avoid the player from being pretty delayed
            transform.position = pos;
        }
        
    }

    void OnCollisionEnter(Collision col){
        /*The player can be infected just one time, to not call this function
        many times and cause trouble*/
        if(alreadyInfected == false){
            rend = col.gameObject.GetComponent<Renderer>();
            if(rend.material.color == infectionColor && super != true){
                alreadyInfected = true;
                startToDie();
            }
            else{
                //Every collision gives 10 points
                ScoreManager.instance.UpdateCurrentScore(10);
            }
            //When the player reachs the winLine, its rigidbody is freezed
            if(col.gameObject.tag == "winLine"){
                rb.constraints = RigidbodyConstraints.FreezeAll;
                //Starts the congrats to the user, for reaching the win line
                ScoreManager.instance.SaveHighestScore();
                TheGameManager.instance.ActiveParticleSystem();
                UIManager.instance.WinGameUI();
                //TheGameManager.instance.UnlockNextLevel();
            }
        }
    }

    //The process of dying - can be saved with one antipoison
    void startToDie(){
        //The player receives the color of the infection
        player.GetComponent<Renderer>().material.color = infectionColor;
        //The Player stops moving
        rb.constraints = RigidbodyConstraints.FreezeAll;
        //Increase the size
        StartCoroutine(increaseToExplode());
    }
    
    IEnumerator increaseToExplode(){
        //Start to die
        for(int i=0; i < 40; i++){
            //Increse the sphere size
            player.transform.localScale = new Vector3(i/7+1,i/7+1,i/7+1);
            //Rotate the sphere
            player.transform.Rotate(new Vector3(i*3,i*3,0), Space.Self);
            //Waits
            yield return new WaitForSeconds(0.055f);
        }
        //Call the antipoison screen
        UIManager.instance.GotInfectedUI();
    }
    
    public void userSaved(){
        //Save the player and return to the game
        rb.constraints = RigidbodyConstraints.None;
        player.GetComponent<Renderer>().material.color = friendlyColor;
        player.transform.localScale = new Vector3(1.35f,1.35f,1.35f);
        super = true;
        StartCoroutine(returningToGame());
        //rb.constraints = originalConstraints;
        alreadyInfected = false;
    }
    IEnumerator returningToGame(){
        yield return new WaitForSeconds(3);
        super = false;
    }
    public void die(){
        //Instantiate a lot of objects inside of the player, SIMULATING AN EXPLOSION
        for(int i=0;i < 7;i++){    
            Vector3 playerPos = player.transform.position;
            obstacle = Instantiate(typeOfSolid[0], new Vector3(playerPos.x, playerPos.y+0.1f, playerPos.z), Quaternion.identity);
            obstacle.GetComponent<Renderer>().material.color = infectionColor;
        }  
        death = true;
        //Call the GAME OVER screen
        UIManager.instance.GameOverUI();
    }

    

    
    
    
    
}
